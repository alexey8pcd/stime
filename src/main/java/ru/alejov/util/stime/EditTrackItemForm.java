package ru.alejov.util.stime;

import java.awt.HeadlessException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;

/**
 * @author Ovcharov Alexey
 */
public class EditTrackItemForm extends javax.swing.JDialog {

    private TrackItem trackItem;
    private Date prevDate;
    private Date nextDate;
    
    /**
     * Creates new form EditTrackItemForm
     */
    public EditTrackItemForm(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelDescription1 = new javax.swing.JLabel();
        labelTaskId = new javax.swing.JLabel();
        textFieldTaskId = new javax.swing.JTextField();
        labelDescription = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaDescription = new javax.swing.JTextArea();
        textFieldTime = new javax.swing.JTextField();
        buttonCancel = new javax.swing.JButton();
        buttonOk = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        labelDescription1.setText("Time");

        labelTaskId.setText("TaskId");

        labelDescription.setText("Description");

        textAreaDescription.setColumns(20);
        textAreaDescription.setLineWrap(true);
        textAreaDescription.setRows(2);
        jScrollPane1.setViewportView(textAreaDescription);

        buttonCancel.setText("Cancel");
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelActionPerformed(evt);
            }
        });

        buttonOk.setText("OK");
        buttonOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOkActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelDescription1)
                            .addComponent(textFieldTime, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textFieldTaskId)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelTaskId)
                                .addGap(0, 94, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelDescription)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(buttonOk)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonCancel)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelDescription1)
                    .addComponent(labelTaskId))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textFieldTaskId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textFieldTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addComponent(labelDescription)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonCancel)
                    .addComponent(buttonOk))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOkActionPerformed
        completeEdit();
    }//GEN-LAST:event_buttonOkActionPerformed

    private void completeEdit() throws HeadlessException {
        String text = textFieldTime.getText();
        try {
            String trackId = textFieldTaskId.getText();
            if (!trackId.isEmpty() && !Constants.BEGIN_DAY.equals(trackId)
                    && !Constants.PAUSE.equals(trackId)
                    && !Constants.END_DAY.equals(trackId)) {
                SimpleDateFormat simpleDateFormat = new SimpleDateFormat(Constants.TIME_FORMAT);
                simpleDateFormat.setLenient(false);
                Date date = simpleDateFormat.parse(text);
                if ((prevDate == null || date.after(prevDate))
                        && (nextDate == null || date.before(nextDate))) {
                    String description = textAreaDescription.getText();
                    trackItem = new TrackItem(trackId, date);
                    trackItem.setDescription(description);
                    dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "Time value intersects with existing intervals");
                }
            }
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "Invalid time: " + text);
        }
    }
    

    private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed
        dispose();
    }//GEN-LAST:event_buttonCancelActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCancel;
    private javax.swing.JButton buttonOk;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelDescription;
    private javax.swing.JLabel labelDescription1;
    private javax.swing.JLabel labelTaskId;
    private javax.swing.JTextArea textAreaDescription;
    private javax.swing.JTextField textFieldTaskId;
    private javax.swing.JTextField textFieldTime;
    // End of variables declaration//GEN-END:variables

    void setTrack(TrackItem selectedTrack, Date prevDate, Date nextDate) {
        this.prevDate = prevDate;
        this.nextDate = nextDate;
        Date date = selectedTrack.getDate();
        String trackId = selectedTrack.getTrackId();
        String description = selectedTrack.getDescription();
        textFieldTime.setText(new SimpleDateFormat(Constants.TIME_FORMAT).format(date));
        textFieldTaskId.setText(trackId);
        textAreaDescription.setText(description);
    }

    TrackItem getTrackItem() {
        return trackItem;
    }

}
